[[[7,7,7],[4,4,2]],[[0,0,7,0],[4,4,4,4]],[[7,0,0,0],[4,4,4,4]],[[7,0],[2,2]],[[7,7],[2,2]],
[[7,0,0,7],[4,4,4,4]],[[7,0,7,0],[4,4,4,4]],[[0,7],[2,2]],[[7],[1]],
[[0,7,0,7],[4,4,4,4]],[[0,7,7,7],[4,4,4,4]],[[7,0],[2,2]],[[7,7],[2,2]],
[[7,7,0,7],[4,4,4,4]],[[7,7,7,7],[4,4,4,4]],[[0,7],[2,2]],[[7],[1]],
[[7,7],[2,2]],[[7,0],[2,2]],[[7,7,7,0],[4,4,4,4]],[[7,0,7,7],[4,4,4,4]],
[[7],[1]],[[0,7],[2,2]],[[0,7,7,0],[4,4,4,4]],[[0,0,7,7],[4,4,4,4]],
[[7,7],[2,2]],[[7,0],[2,2]],[[7,7,0,0],[4,4,4,4]],[[7,0,7,0],[0,0,0,0]],
[[7],[1]],[[0,7],[2,2]],[[0,7,0,0],[4,4,4,4]],[[7,7,7],[2,4,4]],[[7,7,7],[4,2,4]],

[[7,19,7],[2,4,2]],[[0,7,0,0],[4,4,4,4]],[[7,0,19,0],[4,4,4,4]],[[7,19,0,0],[4,4,4,4]],[[0,0,7,19],[4,4,4,4]],
[[0,7,19,0],[4,4,4,4]],[[7,0,19,7],[4,4,4,4]],[[7,19,7,0],[4,4,4,4]],[[7,19,7],[4,2,4]],
[[0,0,7,0],[4,4,4,4]],[[7,0,0,0],[4,4,4,4]],[[7,0,0,19],[4,4,4,4]],[[7,0,19,0],[4,4,4,4]],
[[0,7,0,19],[4,4,4,4]],[[0,7,19,7],[4,4,4,4]],[[7,19,0,7],[4,4,4,4]],[[7,19,7,7],[4,4,4,4]],
[[7,7,19,0],[4,4,4,4]],[[7,0,19,7],[4,4,4,4]],[[0,19,7,0],[4,4,4,4]],[[0,0,19,7],[4,4,4,4]],
[[7,19,0,0],[4,4,4,4]],[[7,0,19,0],[4,4,4,4]],[[0,7,0,0],[4,4,4,4]],[[7,19,19],[2,4,4]],
[[7,19,7],[4,2,4]],[[7,19,19,7],[4,4,4,4]],[[7,19,0,7],[4,4,4,4]],[[0,19,7,19],[4,4,4,4]],
[[0,7,0,19],[4,4,4,4]],[[7,0,19,0],[4,4,4,4]],[[7,0,0,19],[4,4,4,4]],[[7,0,0,0],[4,4,4,4]],[[0,0,7,0],[4,4,4,4]],

[[19,19,19],[4,4,2]],[[0,0,19,0],[4,4,4,4]],[[19,0,0,0],[4,4,4,4]],[[19,0,0,0],[4,4,4,4]],[[19,0],[2,2]],[[19,19],[2,2]],
[[19,0,0,19],[4,4,4,4]],[[19,0,19,0],[4,4,4,4]],[[0,19],[2,2]],[[19],[1]],
[[0,19,0,19],[4,4,4,4]],[[0,19,19,19],[4,4,4,4]],[[19,0],[2,2]],[[19,19],[2,2]],
[[19,19,0,19],[4,4,4,4]],[[19,19,19,19],[4,4,4,4]],[[0,19],[2,2]],[[19],[1]],
[[19,19],[2,2]],[[19,0],[2,2]],[[19,19,19,0],[4,4,4,4]],[[19,0,19,19],[4,4,4,4]],
[[19],[1]],[[0,19],[2,2]],[[0,19,19,0],[4,4,4,4]],[[0,0,19,19],[4,4,4,4]],
[[19,19],[2,2]],[[19,0],[2,2]],[[19,19,0,0],[4,4,4,4]],[[19,0,19,0],[4,4,4,4]],
[[19],[1]],[[0,19],[2,2]],[[0,19,0,0],[4,4,4,4]],[[19,19,19],[2,4,4]],[[19,19,19],[4,2,4]],

[[19,26,19],[2,4,4]],[[0,19,0,0],[4,4,4,4]],[[19,0,26,0],[4,4,4,4]],[[19,26,0,0],[4,4,4,4]],[[0,0,19,26],[4,4,4,4]],
[[0,19,26,0],[4,4,4,4]],[[19,0,26,19],[4,4,4,4]],[[19,26,19,0],[4,4,4,4]],[[19,26,19],[4,4,2]],
[[0,0,19,0],[4,4,4,4]],[[19,0,0,0],[4,4,4,4]],[[19,0,0,26],[4,4,4,4]],[[19,0,26,0],[4,4,4,4]],
[[0,19,0,26],[4,4,4,4]],[[0,19,26,19],[4,4,4,4]],[[19,26,0,19],[4,4,4,4]],[[19,26,19,19],[4,4,4,4]],
[[19,19,26,0],[4,4,4,4]],[[19,0,26,19],[4,4,4,4]],[[0,26,19,0],[4,4,4,4]],[[0,0,26,19],[4,4,4,4]],
[[19,26,0,0],[4,4,4,4]],[[19,0,26,0],[4,4,4,4]],[[0,19,0,0],[4,4,4,4]],[[19,26,26],[2,4,4]],
[[19,26,19],[4,2,4]],[[19,26,26,19],[4,4,4,4]],[[19,26,0,19],[4,4,4,4]],[[0,26,19,26],[4,4,4,4]],
[[0,19,0,26],[4,4,4,4]],[[19,0,26,0],[4,4,4,4]],[[19,0,0,26],[4,4,4,4]],[[19,0,0,0],[4,4,4,4]],[[0,0,19,0],[4,4,4,4]]
] @=> int score[][][];

score.size() => int VOICES;

ADSR env[VOICES];
SinOsc sin[VOICES];

for(0 => int i; i < sin.cap(); i++){
    0.9/VOICES => sin[i].gain;
    env[i].set(125::ms, 30::ms, .4, 400::ms);
    sin[i] => env[i] => dac;
}

113 => int beat;

function dur convert(float beat)
{
    Std.fabs(beat) => beat;
    
    60/beat => float tempo;
    return tempo::second;
} 
function dur Dur(dur beat, int div)
{
    Std.abs(div) => div;
    
    (div / 4.0) => float factor;
    (beat / factor) => dur tempo;
    return tempo;
}
function void sound (int cell[][], int cellNum)
{
    for(0 => int i; i < cell[0].cap(); i++)
    {           
        if (cell[0][i] == 0)
        {
            env[cellNum].keyOff();
            Dur(convert(beat),cell[1][i]) => now;
        }
        else{
            Std.mtof(cell[0][i]+36) => sin[cellNum].freq;
            env[cellNum].keyOn();
            Dur(convert(beat),cell[1][i]) => now;
        }
    }
}

while(true){
    for(0 => int i; i < VOICES; i++){
        spork~sound(score[i],i);
    }
    Dur(convert(beat),1) => now;
}
